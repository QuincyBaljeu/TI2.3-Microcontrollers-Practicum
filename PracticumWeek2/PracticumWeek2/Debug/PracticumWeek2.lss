
PracticumWeek2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  00000122  00000196  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000122  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001b6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001e8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000983  00000000  00000000  0000025c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008b3  00000000  00000000  00000bdf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000303  00000000  00000000  00001492  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  00001798  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000046e  00000000  00000000  000017ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000e2  00000000  00000000  00001c5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001d3c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 e2       	ldi	r30, 0x22	; 34
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 32       	cpi	r26, 0x20	; 32
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	34 d0       	rcall	.+104    	; 0x11c <main>
  b4:	34 c0       	rjmp	.+104    	; 0x11e <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <B3>:
	B32();
}

void B3(int digit)
{
	DDRD = 0b11111111;
  b8:	2f ef       	ldi	r18, 0xFF	; 255
  ba:	21 bb       	out	0x11, r18	; 17
	
	if (digit > 15 || digit < 0)
  bc:	80 31       	cpi	r24, 0x10	; 16
  be:	91 05       	cpc	r25, r1
  c0:	20 f0       	brcs	.+8      	; 0xca <B3+0x12>
	{
		PORTD = numbers[14];
  c2:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__DATA_REGION_ORIGIN__+0x1c>
  c6:	82 bb       	out	0x12, r24	; 18
  c8:	08 95       	ret
	}
	else
	{
		 PORTD = numbers[digit];
  ca:	88 0f       	add	r24, r24
  cc:	99 1f       	adc	r25, r25
  ce:	fc 01       	movw	r30, r24
  d0:	e0 50       	subi	r30, 0x00	; 0
  d2:	ff 4f       	sbci	r31, 0xFF	; 255
  d4:	80 81       	ld	r24, Z
  d6:	82 bb       	out	0x12, r24	; 18
  d8:	08 95       	ret

000000da <B32>:
	
}

void B32()
{
	DDRD = 0b11111111;
  da:	8f ef       	ldi	r24, 0xFF	; 255
  dc:	81 bb       	out	0x11, r24	; 17
	DDRC - 0b00000000;
  de:	84 b3       	in	r24, 0x14	; 20
	
	int index = 0;
  e0:	c0 e0       	ldi	r28, 0x00	; 0
  e2:	d0 e0       	ldi	r29, 0x00	; 0
  e4:	05 c0       	rjmp	.+10     	; 0xf0 <B32+0x16>
	{
		if(PINC & 0b00000001)
		{
			if(PINC & 0b00000010)
			{
				index = 0;
  e6:	c0 e0       	ldi	r28, 0x00	; 0
  e8:	d0 e0       	ldi	r29, 0x00	; 0
  ea:	02 c0       	rjmp	.+4      	; 0xf0 <B32+0x16>
		} 
		else if(PINC & 0b00000010)
		{
			if(PINC & 0b00000001)
			{
				index = 0;	
  ec:	c0 e0       	ldi	r28, 0x00	; 0
  ee:	d0 e0       	ldi	r29, 0x00	; 0
	
	int index = 0;

	while (1)
	{
		if(PINC & 0b00000001)
  f0:	98 9b       	sbis	0x13, 0	; 19
  f2:	09 c0       	rjmp	.+18     	; 0x106 <B32+0x2c>
		{
			if(PINC & 0b00000010)
  f4:	99 99       	sbic	0x13, 1	; 19
  f6:	f7 cf       	rjmp	.-18     	; 0xe6 <B32+0xc>
			{
				index = 0;
			}
			else
			{
				if(index < 15)
  f8:	cf 30       	cpi	r28, 0x0F	; 15
  fa:	d1 05       	cpc	r29, r1
  fc:	cc f7       	brge	.-14     	; 0xf0 <B32+0x16>
				{
					index++;
  fe:	21 96       	adiw	r28, 0x01	; 1
					B3(index);		
 100:	ce 01       	movw	r24, r28
 102:	da df       	rcall	.-76     	; 0xb8 <B3>
 104:	f5 cf       	rjmp	.-22     	; 0xf0 <B32+0x16>
				}
			}
		} 
		else if(PINC & 0b00000010)
 106:	99 9b       	sbis	0x13, 1	; 19
 108:	f3 cf       	rjmp	.-26     	; 0xf0 <B32+0x16>
		{
			if(PINC & 0b00000001)
 10a:	98 99       	sbic	0x13, 0	; 19
 10c:	ef cf       	rjmp	.-34     	; 0xec <B32+0x12>
			{
				index = 0;	
			}
			else
			{
				if(index > 0)
 10e:	1c 16       	cp	r1, r28
 110:	1d 06       	cpc	r1, r29
 112:	74 f7       	brge	.-36     	; 0xf0 <B32+0x16>
				{
					index--;
 114:	21 97       	sbiw	r28, 0x01	; 1
					B3(index);
 116:	ce 01       	movw	r24, r28
 118:	cf df       	rcall	.-98     	; 0xb8 <B3>
 11a:	ea cf       	rjmp	.-44     	; 0xf0 <B32+0x16>

0000011c <main>:
};

int main(void)
{
    /* Replace with your application code */
	B32();
 11c:	de df       	rcall	.-68     	; 0xda <B32>

0000011e <_exit>:
 11e:	f8 94       	cli

00000120 <__stop_program>:
 120:	ff cf       	rjmp	.-2      	; 0x120 <__stop_program>
