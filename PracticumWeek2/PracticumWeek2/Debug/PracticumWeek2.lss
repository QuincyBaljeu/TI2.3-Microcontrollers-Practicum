
PracticumWeek2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00000170  000001e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000170  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000220  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  0000025c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b78  00000000  00000000  000002bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000949  00000000  00000000  00000e34  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000045e  00000000  00000000  0000177d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c0  00000000  00000000  00001bdc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004c4  00000000  00000000  00001c9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001e7  00000000  00000000  00002160  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00002347  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 e7       	ldi	r30, 0x70	; 112
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ac 30       	cpi	r26, 0x0C	; 12
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	4f d0       	rcall	.+158    	; 0x152 <main>
  b4:	5b c0       	rjmp	.+182    	; 0x16c <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <wait>:
	DDRD = 0b11111111; //Set PORTD to output
	
	while(1){
		int i = 0;
		
		while (animation[i].delay != 0)
  b8:	18 16       	cp	r1, r24
  ba:	19 06       	cpc	r1, r25
  bc:	6c f4       	brge	.+26     	; 0xd8 <wait+0x20>
  be:	20 e0       	ldi	r18, 0x00	; 0
  c0:	30 e0       	ldi	r19, 0x00	; 0
  c2:	ef ec       	ldi	r30, 0xCF	; 207
  c4:	f7 e0       	ldi	r31, 0x07	; 7
  c6:	31 97       	sbiw	r30, 0x01	; 1
  c8:	f1 f7       	brne	.-4      	; 0xc6 <wait+0xe>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <wait+0x14>
  cc:	00 00       	nop
  ce:	2f 5f       	subi	r18, 0xFF	; 255
  d0:	3f 4f       	sbci	r19, 0xFF	; 255
  d2:	82 17       	cp	r24, r18
  d4:	93 07       	cpc	r25, r19
  d6:	a9 f7       	brne	.-22     	; 0xc2 <wait+0xa>
  d8:	08 95       	ret

000000da <writeLcd>:
		}
	}
}

void writeLcd() {
	PORTC |= (1<<LCD_E);
  da:	ab 9a       	sbi	0x15, 3	; 21
	wait(1);
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	eb df       	rcall	.-42     	; 0xb8 <wait>
	PORTC &= ~(1<<LCD_E);
  e2:	ab 98       	cbi	0x15, 3	; 21
	wait(1);
  e4:	81 e0       	ldi	r24, 0x01	; 1
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	e7 cf       	rjmp	.-50     	; 0xb8 <wait>
  ea:	08 95       	ret

000000ec <init>:
}

void init() {
  ec:	cf 93       	push	r28
	// PORTC output mode and all low (also E and RS pin)
	DDRC = 0xFF;
  ee:	8f ef       	ldi	r24, 0xFF	; 255
  f0:	84 bb       	out	0x14, r24	; 20
	PORTC = 0x00;
  f2:	15 ba       	out	0x15, r1	; 21

	// Step 2 (table 12)
	PORTC = 0x20;	// function set
  f4:	c0 e2       	ldi	r28, 0x20	; 32
  f6:	c5 bb       	out	0x15, r28	; 21
	writeLcd();
  f8:	f0 df       	rcall	.-32     	; 0xda <writeLcd>

	// Step 3 (table 12)
	PORTC = 0x20;   // function set
	writeLcd();
  fa:	c5 bb       	out	0x15, r28	; 21
  fc:	ee df       	rcall	.-36     	; 0xda <writeLcd>
	PORTC = 0x80;
  fe:	80 e8       	ldi	r24, 0x80	; 128
	writeLcd();
 100:	85 bb       	out	0x15, r24	; 21

	// Step 4 (table 12)
	PORTC = 0x00;   // Display on/off control
 102:	eb df       	rcall	.-42     	; 0xda <writeLcd>
	writeLcd();
 104:	15 ba       	out	0x15, r1	; 21
	PORTC = 0xF0;
 106:	e9 df       	rcall	.-46     	; 0xda <writeLcd>
	writeLcd();
 108:	80 ef       	ldi	r24, 0xF0	; 240

	// Step 4 (table 12)
	PORTC = 0x00;   // Entry mode set
 10a:	85 bb       	out	0x15, r24	; 21
	writeLcd();
 10c:	e6 df       	rcall	.-52     	; 0xda <writeLcd>
 10e:	15 ba       	out	0x15, r1	; 21
	PORTC = 0x60;
 110:	e4 df       	rcall	.-56     	; 0xda <writeLcd>
 112:	80 e6       	ldi	r24, 0x60	; 96
	writeLcd();
 114:	85 bb       	out	0x15, r24	; 21
 116:	e1 df       	rcall	.-62     	; 0xda <writeLcd>
}
 118:	cf 91       	pop	r28
 11a:	08 95       	ret

0000011c <lcd_write_data>:
inputs:			byte - written to LCD
outputs:
notes:			According datasheet HD44780 table 12
Version :    	DMK, Initial code
*******************************************************************/
{
 11c:	cf 93       	push	r28
 11e:	c8 2f       	mov	r28, r24
	// First nibble.
	PORTC = byte;
 120:	85 bb       	out	0x15, r24	; 21
	PORTC |= (1<<LCD_RS);
 122:	aa 9a       	sbi	0x15, 2	; 21
	writeLcd();
 124:	da df       	rcall	.-76     	; 0xda <writeLcd>

	// Second nibble
	PORTC = (byte<<4);
 126:	c2 95       	swap	r28
 128:	c0 7f       	andi	r28, 0xF0	; 240
 12a:	c5 bb       	out	0x15, r28	; 21
	PORTC |= (1<<LCD_RS);
	writeLcd();
 12c:	aa 9a       	sbi	0x15, 2	; 21
 12e:	d5 df       	rcall	.-86     	; 0xda <writeLcd>
}
 130:	cf 91       	pop	r28
 132:	08 95       	ret

00000134 <display_text>:
	writeLcd();
	PORTC = 0x60;
	writeLcd();
}

void display_text(char *str){
 134:	cf 93       	push	r28
 136:	df 93       	push	r29
 138:	ec 01       	movw	r28, r24
	for(;*str; str++){
 13a:	88 81       	ld	r24, Y
 13c:	88 23       	and	r24, r24
 13e:	31 f0       	breq	.+12     	; 0x14c <display_text+0x18>
 140:	21 96       	adiw	r28, 0x01	; 1
		lcd_write_data(*str);
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	eb df       	rcall	.-42     	; 0x11c <lcd_write_data>
	PORTC = 0x60;
	writeLcd();
}

void display_text(char *str){
	for(;*str; str++){
 146:	89 91       	ld	r24, Y+
 148:	81 11       	cpse	r24, r1
 14a:	fb cf       	rjmp	.-10     	; 0x142 <display_text+0xe>
		lcd_write_data(*str);
	}
}
 14c:	df 91       	pop	r29
 14e:	cf 91       	pop	r28
 150:	08 95       	ret

00000152 <main>:
};

int main(void)
{
    /* Replace with your application code */
	DDRD = 0xFF;
 152:	8f ef       	ldi	r24, 0xFF	; 255
 154:	81 bb       	out	0x11, r24	; 17
	
	init();
 156:	ca df       	rcall	.-108    	; 0xec <init>
	
	display_text("YEDI, YOARE");
 158:	80 e0       	ldi	r24, 0x00	; 0
 15a:	91 e0       	ldi	r25, 0x01	; 1
 15c:	eb df       	rcall	.-42     	; 0x134 <display_text>
	
	while (1)
	{
		PORTD ^= (1<<7);	// Toggle PORTD.7
 15e:	82 b3       	in	r24, 0x12	; 18
 160:	80 58       	subi	r24, 0x80	; 128
 162:	82 bb       	out	0x12, r24	; 18
		wait( 250 );
 164:	8a ef       	ldi	r24, 0xFA	; 250
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	a7 df       	rcall	.-178    	; 0xb8 <wait>
 16a:	f9 cf       	rjmp	.-14     	; 0x15e <main+0xc>

0000016c <_exit>:
 16c:	f8 94       	cli

0000016e <__stop_program>:
 16e:	ff cf       	rjmp	.-2      	; 0x16e <__stop_program>
